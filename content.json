{"meta":{"title":"BLOG","subtitle":"附标题","description":"描写","author":"NIUHONGGUI","url":"http://niuhonggui.github.io"},"pages":[{"title":"Home","date":"2018-05-25T03:22:38.000Z","updated":"2018-05-25T08:12:34.000Z","comments":true,"path":"Home/index.html","permalink":"http://niuhonggui.github.io/Home/index.html","excerpt":"","text":""},{"title":"about","date":"2018-05-25T03:22:06.000Z","updated":"2018-05-25T08:12:34.000Z","comments":true,"path":"about/index.html","permalink":"http://niuhonggui.github.io/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-05-25T03:20:51.000Z","updated":"2018-05-25T08:12:34.000Z","comments":true,"path":"tags/index.html","permalink":"http://niuhonggui.github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-05-25T03:20:18.000Z","updated":"2018-05-25T08:12:34.000Z","comments":true,"path":"categories/index.html","permalink":"http://niuhonggui.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"读javaScript设计模式第一章--笔记","slug":"object","date":"2018-07-10T01:57:35.000Z","updated":"2019-02-10T02:37:51.090Z","comments":true,"path":"2018/07/10/object/","link":"","permalink":"http://niuhonggui.github.io/2018/07/10/object/","excerpt":"","text":"读感：设计模式是一种解决问题的模式(模板)，功效一高模块化开发能力(可维护，高效率，可扩展)函数和变量之间的关系：函数声明和变量声明都是指开辟了一片储存值的空间什么是堆栈？ 堆 引用类型 栈 基本类型 变量 堆是由栈组成函数直接量声明(面向过程编程)函数式编程？需求由函数执行(函数解决需求)面向对象编程？需求抽象成对象 功能 ：验证用户名，邮箱，密码。函数直接量：123456789function checkName()&#123; //验证姓名&#125;function checkEmail()&#123; //验证邮箱&#125;function checkPassword()&#123; //验证密码&#125; 知识点： 1.函数创建即变量，变量变化即函数，函数即变量 函数的另一种形式，需要提前声明123456789var checkName=function()&#123; //验证姓名&#125;var checkEmail=function()&#123; //验证邮箱&#125;var checkPassword=function()&#123; //验证密码&#125; 1.减少函数命名风险：将多个函数变量保存在保存在一个变量里 2.创建复合功能的对象，访问储存值通过遍历访问它的属性和方法， 对象收编变量1234567891011var CheckObject=&#123; CheckName:function()&#123; //验证姓名 &#125;, checkEmail:function()&#123; //验证邮箱 &#125;, checkPassword:function()&#123; //验证密码 &#125; &#125; 对象的另一种创建方式，添加属性，方法12345678910var CheckObject=function()&#123;&#125;; CheckObject.checkName=function()&#123; //验证姓名 &#125; CheckObject.checkEmail=function()&#123; //验证邮箱 &#125; CheckObject.checkPassword=function()&#123; //验证密码 &#125; 以上代码只达到了封装，没有继承多态特性 对象 new 机制12345678910111213var CheckObject=function()&#123; return&#123; checkName:function()&#123; //验证姓名 &#125;, checkEmail:function()&#123; // 验证邮箱 &#125;, checkPassword:function()&#123; // 验证密码 &#125; &#125; &#125; 这样每次调用这个函数时都返回了一个新对象，这个每个人使用就会互不影响以上代码并不是真正意义上类的创建 返回出来的对象与原来 CheckObject 对象无关 对象类1234567891011var CheckObject=function()&#123; this.checkName=function()&#123; // 验证姓名 &#125; this.checkEmail=function()&#123; // 验证邮箱 &#125; this.checkPassword=function()&#123; // 验证密码 &#125; &#125; 类：类必须使用 new 关键字创建，this 可以理解为继承的关键然而每次调用 new 返回新的对象都会对类的 this 上的属性进行复制，所以这些新创建的对象都自己独有的方法，然而这样做消耗内存 prototype1.1 这两种方式不能混用12345678910var CheckObject=function()&#123;&#125;;CheckObject.prototype.checkName=function()&#123; //验证姓名&#125;CheckObject.prototype.checkEmail=function()&#123; // 验证邮箱&#125;CheckObject.prototype.checkPassword=function()&#123; // 验证密码&#125; prototype1.2 这两种方式不能混用1234567891011121314var CheckObject=function()&#123;&#125;;CheckObject.prototype=&#123; checkName:function()&#123; //验证姓名 &#125;, checkEmail:function()&#123; //验证邮箱 &#125;, checkPassword:function()&#123; // 验证密码 &#125;&#125;var a= new CheckObject();a.checkName(); 这样创建对象的实例，创建出来它们都会依赖 prototype 原型依次寻找，找到的方法都是同一个，所以它们都绑定在 CheckObject 对象类的原型上 ##1.3 如果想链式调用1234567891011121314151617var CheckObject=function()&#123;&#125;; CheckObject.prototype=&#123; checkName:function()&#123; //验证姓名 return this; &#125;, checkEmail:function()&#123; //验证邮箱 return this; &#125;, checkPassword:function()&#123; // 验证密码 return this; &#125;&#125; var a= new CheckObject(); a.checkName().checkEmail().checkPassword() 抽象出一个统一添加方法的功能方法函数式12345678910111213141516171819Function.protoype.addMethod=function(name,fn)&#123; this[name]=fn 链式添加方法 return this &#125;var methods=new Function();methods.addMethod(&apos;cheeekName&apos;,function()&#123; // 验证姓名 链式调用 return this &#125;) methods.addMethod(&apos;checkEmail&apos;,function()&#123; // 验证邮箱 链式调用 return this &#125;) methods.checkName(); methods.checkEmail(); methods.checkEmail().checkName() 提供添加后续功能使用 类式调用方式(最佳方案)12345678910111213Function.prototype.addMethod=function(name,fn)&#123; this.prototype[name]=fn; return this;&#125;var methods=function()&#123;&#125;methods.addMethod(&apos;checkName&apos;,()=&gt;&#123; //验证姓名 return this;&#125;).methods.addMethod(&apos;checkEmail&apos;,()=&gt;&#123; // 验证邮箱&#125;)var check=new method();methods.checkEmail() 封装(使用时再创建)继承(原型链)多态(重载，重写) 第一遍读是7月，后续我没修改。","categories":[],"tags":[{"name":"object","slug":"object","permalink":"http://niuhonggui.github.io/tags/object/"}]},{"title":"WebpackReact","slug":"WebpackReact","date":"2018-06-25T03:56:22.000Z","updated":"2019-02-10T01:44:37.869Z","comments":true,"path":"2018/06/25/WebpackReact/","link":"","permalink":"http://niuhonggui.github.io/2018/06/25/WebpackReact/","excerpt":"","text":"本站只提供参考，不保证内容的完整准确性，谨慎参考！ Reacr 前期 webpack 配置注：脚手架搭建的项目首次使用需要配置 git，如果想配置则需要删除隐藏文件 git 相关文件1.初始化 webpacknpm init 2.安装开发依赖npm install webpack webpack-cli babel-loader @babel/core @babel/preset-env @babel/preset-react -D-D 表示开发环境@babel/core @babel/preset-env @babel/preset-react 建议安装最新版的，在 webpack 打包中，会因为版本的冲突报错影响打包，所以建议安装最新版本的 3.安装 react 生产依赖npm install react react-dom -S-S 表示生产环境 4.在当前项目目录下创建 webpack.config.js 写配置文件如果要引入.less的文件 就必须安装相对应依赖 npm i less style-loader css-loader less-loader -D然后在webpack.config.js中写配置 注意：在配置use : [“style-loader”,”css-loader”,”less-loader”] 顺序一定不能变。5.新建一个JS文件 ，测试当前安装的webpack能否完成打包 6.安装webpack热更新(根据项目的代码自动完成打包，就不需要每次写完代码重新webpack一次)npm install webpack-dev-server -D然后在webpack.cong.js写入配置然后进入package.json 加如下代码：这个时候运行npm run start可以访问localhost:8080 记得把index.html文件放到dist文件下，这个时候整个项目就可以运行了","categories":[],"tags":[{"name":"React","slug":"React","permalink":"http://niuhonggui.github.io/tags/React/"},{"name":"webpack","slug":"webpack","permalink":"http://niuhonggui.github.io/tags/webpack/"}]},{"title":"hexo+github搭建个人博客","slug":"hexo+github搭建个人博客","date":"2018-05-24T03:11:11.000Z","updated":"2019-02-09T07:06:57.214Z","comments":true,"path":"2018/05/24/hexo+github搭建个人博客/","link":"","permalink":"http://niuhonggui.github.io/2018/05/24/hexo+github搭建个人博客/","excerpt":"","text":"本站只提供参考，不保证内容的完整准确性，不喜勿喷。欢迎来到hexo+github博客搭建教程，这是一篇比较繁琐的blog，本人亲自实战操作经验。 环境配置node环境 Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。 Node.js 的包管理器 npm，是全球最大的开源库生态系统。浏览器打开node官网下载8.11.2版本的msi双击安装 环境测试 win+r打开运行窗口，输入cmd回车 在cmd窗口输入1node -v 如果提示”node不是内部或外部命令”，需要重新安装node如果提示v8.11.2则代表安装成功 git服务 浏览器打开git官网，下载最新版的git安装 安装完毕以后，在桌面右键菜单出现git bash here则代表安装成功 安装hexo脚手架 win+r打开运行窗口，输入cmd回车 在命令行输入1npm install hexo-cli -g 通过npm包管理器全局安装hexo脚手架 博客搭建初始化博客项目 桌面右键选择git bash here 在命令行窗口输入1hexo init blog 通过hexo在桌面新建一个叫blog的博客项目ps:blog是项目名称，名字随意，但不能是中文 切换到blog路径 1cd blog 安装项目依赖 1npm install 启动服务器 1hexo s 预览博客浏览器地址栏输入localhost:4000或者127.0.0.1:4000回车ps：建议使用chrome(谷歌浏览器) hexo常规操作 清理项目缓存1hexo clean 何时使用？修改了博客内容却没有效果或者修复了bug报错依然存在 编译博客1hexo g 何时使用？每次hexo clean之后都需要重新编译部分情况下修改了_config.yml配置文件后需要重新编译手动新建博客文章之后需要重新编译 重启服务器在之前启动服务的命令行窗口使用快捷键”ctrl+c”可以停止hexo服务然后紧接着输入hexo s启动何时使用？修改了_config.yml需要重启服务 hexo项目托管到github本机验证github的key 打开github 注册个人账号并记录下用域名和邮箱，并且验证邮箱 桌面右键打开git bash here 1ssh-keygen -t rsa -C &quot;邮箱&quot; 接下来依次打开：c:/Users/Administrator/.ssh路径找到：id_rsa.pub文件右键选择记事本打开，全选并复制里面的内容(key) 回到github页面，找到头像右侧倒三角下拉菜单，选择settings 在页面左侧选择ssh and gpk 点击右上角绿色 add ssh按钮 在表单输入title(随意)和key(粘贴之前复制到的key)然后点击绿色create ssh按钮 回到刚才创建key的命令行窗口验证用户名和邮箱12git config --global user.name &quot;用户名&quot;git config --global user.email &quot;邮箱&quot; 如果验证成功，没有任何提示。 创建github用户名同名仓库在github页面点击头像左侧的+，选择New repository重点:仓库名必须是:用户名.github.io,严格区分大小写，如：假如用户名为aBc，那么仓库名就为:aBc.github.io 配置hexo找到项目主目录下的_config.yml文件在文档的最下方添加如下内容：1234deploy: type: git repository: http://github.com/用户名/用户名.github.io branch: master 注意：用户名严格区分大小写ps：整个项目有2个_config.yml根目录的_config.yml负责整个项目的一些配置，如：博客名称、语言等themes文件夹内的_config.yml负责主题样式方面的配置 项目推送（这是重点） 安装gcmw（解压压缩包，双击install.cmd） 打开博客项目根目录，右键git bash here 安装deployer-git依赖 1npm install hexo-deployer-git --save 依次执行如下命令 1hexo clean 重新编译1hexo g 推送1hexo d 中途会弹出github的验证，输入相应的应户名密码就好 如果推送成功，在浏览器打开http://用户名.github.io即可访问 #主题更换设置 在github主题库或者问候度娘，找到喜欢的主题然后复制下载命令 安装依赖：npm install hexo 。。。。（此处点点是每个主题不一样命令不同） 在blog文件的主题目录下找到_config.yml 中的theme改为主题名称 重启服务——预览 #留言版功能：本人用的valine","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://niuhonggui.github.io/tags/hexo/"},{"name":"git","slug":"git","permalink":"http://niuhonggui.github.io/tags/git/"},{"name":"github","slug":"github","permalink":"http://niuhonggui.github.io/tags/github/"}]}]}